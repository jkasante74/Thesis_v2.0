INSTALLING ThesisImplementation

1. INTRODUCTION
======================
This README file explains how to import and run the ThesisImplementation project developed for the iterated round robin tournament of the Prisoner Dilemma game which is freely available for distribution and experimentation.

The implementation of the simulator is divided into seven main JAVA packages six of which represent the main components of the System's Architecture: GUI, historicalInformationManager, setupManager, simulationManager, tournamentBoard, and agents.

These packages are collections of JAVA programs some of which are adopted from external sources and implemented to provide services such as creating line graph, scheduling of tournaments in Round Robin structure, reading and writing into a file, etc.  

The packages shown in this implementation are described as the main components in the System Architecture section of the Thesis titled “Development of Cooperation Among Informed Agents”. 

By Jonathan Nyantakyi.




2. INSTALLATION
=================
2.1 Requirements

The software requirements

  - Java Eclipse IDE version Kepler or higher with capacity to support J-Free-Charts 1.0.19
  - J-Free-Charts 1.0.19 Java library
  - Microsoft Excel 2003, Matlab version 6 or higher.


I have successfully compiled “ThesisImplementation” project under the following operating systems and compiler versions:

  - Mac OS X with Eclipse IDE and JDK Compliance level 1.6 

  - Running on other operating systems with Java such as Microsoft Windows should also  
    work just fine.




2.2 Unpacking the archive

To install,

1) Download the compressed archive file “ThesisImplementation”.

2) Import the compressed file into Eclipse IDE Kepler or above using the steps below:

	a. Right-click any space in the package Explorer pane.
	b. Select the "Import..." option.
	c. Choose "Existing Projects into Workspace" and choose Next.
	d. Choose the "Select archive file" option and browse to import the compressed program file.
	e. Click "Finish" to import the program.

	This will create a new project labelled "ThesisImplementation" which contains the source 
	code.



2.3 Importing Supporting Libraries

To perform a simulation experiment, it is important to ensure that all other required external libraries are first imported

1. Right click on the “ThesisImplementation” project in your package explorer and select "Properties" 
2. In the Properties dialog, click on "Java Build Path" to show the various imported libraries.
3. Click on add "External Libraries JARS"
4. Locate the libraries "jcommon-1.0.23.jar" and "jfreechart-1.0.19,jar" in the externalLibraries package.
5. Click on "Open" and "OK".


3. RUNNING THE PROGRAM
===============================

You have several options available to run the implementation


3.1 ---- RUN IN ECLIPSE  ----

If you want to run the in an IDE, such as Eclipse, follow the instruction 
below;

1. Expand the project "ThesisImplementation". 
2. Locate the “GUI.java” file in the “gui” package.
3. Right-Click on the “GUI.java"  file
4. Select "Run As" option
5. Choose "Java Application" to run the program.



3.2 ---- COMPILE AND RUN ON THE COMMAND LINE ----

If you know how to compile programs on the command line, and if you have
downloaded the program, you can easily compile and run.
Just change directory in terminal into “ThesisImplementation” and use
the command “javac GUI.java” to compile.  
As long as your compiler supports Java 7 or higher, there should be no errors.  


NOTE : (You might see some warnings, especially if you use a newer version of java, but warnings do not stop a program from being compiled or executed.) 



4. PACKAGES AND CLASSES
=======================

a. externalLibraries/   				--	Holds files with documentation for external services such as graphing.
	
	jcommon-1.0.23.jar				-- 	provides library support to display line, bar and Area chart

	jfreechart-1.0.19.jar				-- 	provides library support to display line chart
		
		


b. gui/           					--	Holds files with documentation for all GUI subcomponents and Configuration Inspector component of the simulator.

	gui/AreaChart					-- 	Creates an Area chart for selected experiment index.
	gui/BarChart					--  Creates an Bar chart for selected experiment index.
	gui/LineChart					—-	Creates an Line chart for selected experiment index.
	gui/GUI_Simulation				—-	Provides a window that displays simulation logs.
	gui/GUI							—-	Provides application window from which user can setup, display and manipulate experiments.




c. historicalInformationManager/						—- 	Holds files and folders for managing and storing simulation experiments
	
	historicalInformationManager/HIM					—-	Manages HIR and answers request for information from Agents. HIM also answers experimenter’s queries through GUI.
	historicalInformationManager/HIR					—-	Provides storage for all experimental statistics, leadershipboard and charts	
		
	


d. setupManager						—-	Holds files for experimental set up and validations
	
	setupManager/ParamConfigMgr			—-	Configures and also validates Experimental set up values  
	setupManager/StrategySetupManager		—-	Configures and also validates agent strategies set up values



e. simulationManager						—-	Controls scheduling and manages the simulation process
	simulationManager/MatchManager				—-	Controls agents activities for every match 
	simulationManager/RoundManager				—-	Controls agents activities for every round 
	simulationManager/Scheduler				—-	Schedules and Controls agents activities for every experiment
	simulationManager/TournamentHandler			—-	Controls agents activities for every tournament




f. tournamentBoard					—- 	Storage where agents in each match encounter write their actions




g. agents						-— 	Holds files and folders for managing agents, beliefs, strategies, and actions.
	agents/agent					—-	Agent component that creates agents and holds their beliefs	
 	agents/AgentStrategies				—	Stores agents strategies and associated actions.





More descriptions of these classes and the various methods  can be found in the javadoc file attached to the implementation code or as block comments at the beginning of each method.


4. EXTERNAL CODES ADOPTED AND MODIFIED
======================================

a. Charting : 
      
	Used in files : LineChart.java , AreaChart.java, BarChart.java 
      	
	Adopted and modified from : http://www.jfree.org/jfreechart/index.html 


b. RoundRobinScheduling :

	Used in files : Scheduler.java , TournamentHandler.java, RoundHandler.java, MatchManager.java

	Adopted and modified from : http://bluebones.net/2005/05/generating-fixture-lists/comment-page-1/
